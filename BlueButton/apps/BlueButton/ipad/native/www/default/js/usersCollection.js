
/* JavaScript content from js/usersCollection.js in folder common */
/*
       *  Licensed Materials - Property of IBM
       *  5725-G92 (C) Copyright IBM Corp. 2011, 2013. All Rights Reserved.
       *  US Government Users Restricted Rights - Use, duplication or
       *  disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

/**

 * JSONStore Helper Code for collection users
 *
 * The code below WILL NOT WORK unless you call it inside or after wlCommonInit()
 * and it will only work in iOS and Android environments.
 *
 * This file has been generated by the JSON Store Wizard.
 *
 * usersSearchFields - Search fields you selected when you defined the searchable fields in the JSON collection.
 * usersAdapterOptions - Object that contains the name of the adapter linked to 
 *		this collection and the name of various procedures to perform CRUD operations when pushing
 *		documents back to the server. Load is an object that determines the procedure used
 *		to load documents into the collection, you may specify parameters and a key (generally the name of an array that
 *		contains objects you want to load to the collection). Accept is a function called every time
 *		an adapter procedure is invoked to push data to the back end service. You may specify conditions to
 *		accept if data was correctly pushed (ie. status 200 from the server that means we
 *		successfully pushed the data and will mark it up-to-date in the JSONStore).
 * initCollectionSuccessCallback - Called after the collection has been provisioned.
 * initCollectionFailureCallback - Called after the collection failed to be provisioned.
 * 'usersCollection/ready' - Event that fires when the collection is ready to be used.
 * WL.usersCollection.init() - Called to initialize the collection.
 * WL.usersCollection.getInstance() - Called to get an instance of the collection.
 * WL.JSONStore.usePassword(pwd) - Optionally called to set a password for all collections, otherwise the data will not be encrypted.
 *
 */

if (WL.Client.getEnvironment() === 'iphone' ||
	WL.Client.getEnvironment() === 'ipad' ||
	WL.Client.getEnvironment() === 'android') {

	WL.namespace('WL.usersCollection');
	WL.usersCollection = (function (jQuery) {

		//Dependencies:
		var wlJsonStore = WL.JSONStore,
			$ = jQuery;

		if(typeof cordova === 'undefined' ||
			typeof WL.JSONStore === 'undefined' ||
			typeof jQuery === 'undefined' ||
			typeof jQuery.event.trigger !== 'function') {

			WL.Logger.debug('Check that your dependencies are defined');
			//You may want to wrap the code below in an else block.
			//This is meant as a warning, but functionality may be hindered 
			//if you keep executing code without the dependencies.
		}

		//Private Members:







		var users,
			usersSearchFields = {"age":"integer","name":"string"},
			usersAdapterOptions = {
				name: 'user',
				replace: 'updateUser',
				remove: 'deleteUser',
				add: 'addUser',
				load: {
					procedure: 'getUsers',
					params: [],
					key: 'users'
				},
				accept: function (data) {
					return (data.status === 200);
				}
			},

			initCollectionSuccessCallback = function () {
		
				WL.Logger.debug('WL.usersCollection is ready');
				usersCollection.findAll({onFailure: genericFailureCallback, onSuccess: function (results) {
					window.patient = results[0].json.ClinicalDocument;
				}});
			},

			initCollectionFailureCallback = function (err) {

				// Handle errors here, err is an status/error code (int)
				WL.Logger.debug(err + ' - Error Message: ' + wlJsonStore.getErrorMessage(err));
			},
			
			initCollection = function () {
				
				//{load: true} means data will be loaded using
				//the adapter linked to the collection inside the load object
				users = wlJsonStore.initCollection(
						"users",
						usersSearchFields,
						{adapter: usersAdapterOptions, 
						onSuccess: initCollectionSuccessCallback, 
						onFailure: initCollectionFailureCallback,
						username: 'carlos',
						password: '12345',
						load:true});
			},

			getCollectionInstance = function () {

				return users;
			};

		//Public API
		return {
			getInstance : getCollectionInstance,
			init : initCollection
		};

	})(WLJQ); //end WL.usersCollection
	
}//end if statement that checks for valid environments

//You can add the part above using a script tag:
//<script src="js/usersCollection.js"></script>
//And then cut the following text and paste it inside wlCommonInit():

